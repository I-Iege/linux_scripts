Raspberry Pi 4 Setup for Manjaro Minimal:  

-> Prepare Memory Card
  - Download Manjaro ARM Minimal image:
      https://manjaro.org/downloads/arm/raspberry-pi-4/arm8-raspberry-pi-4-minimal/
	- Flash the image to memory card 
			( Warning! Access to portable storage necessary! )
  - Put the memory card to your laptop's socket
  - Login to your laptop as admin
  - Open "Computer Management"
  - Select "Disk Management"
  - Delete all partitions and create a new single partition
  - Start Win32DiskImager and browse the image file 
  - Click "Write"
  - Put the memory card to your raspberry and start it 

-> Do the first time setup:
  - Keyboard layout: hu ( or en / de ... ) 
  - Username: cubetest
  - Additional groups: *Select OK*
  - Full Name: Cube Test
  - Password: nextgencube
  - Confirm Password: nextgencube
  - Root Password: nextgencube
  - Confirm Root Password: nextgencube
  - Timezone: CET
  - Locale: en_US.UTF-8
  - Hostname: CubeTestL1 ( Or L2, L3... )
  - *Select YES to finish Manjaro ARM install*
  - Login as root after reboot 

-> Setup static IP
  - Check if ethernet cable is connected to the standard ethernet port of the raspberry
  - Open the following file for editing ( as root ) 
    nano /etc/systemd/network/eth0.network
  - Change the Address / Gateway / DNS & save the following contents:
    [Match]
    Name=eth0

    [Network]
    Address=10.19.18.135/22
    Gateway=10.19.16.1
    DNS=10.19.0.4
  - reboot
  - Check if static IP has been successfully setup
    - Type "ip a" 
    - The first "inet" value under the "eth0" section must match your preconfigured static IP ( i.e. 10.19.18.135/22 )
  - Ping the IP from another device ( connected to the same network ) to make sure connection was established

-> Update the system:
  - Set country for package manager:
    pacman-mirrors --country Switzerland 
    ( or Ukraine ... ) 
  - Change mirrorlist ( due to SSL certificate )
    - Open mirrorlist:
      nano /etc/pacman.d/mirrorlist 
    - Change "https" to "http" in all available URLs
  - Update:
    pacman -Syuu
    Note: in case of unsuccessful update execute this:
      rm -rf /etc/udev/rules.d/99-vcio-rewrite.rules
      or
      pacman -Syu --overwrite /etc/udev/rules.d/99-vcio-rewrite.rules

-> Install graphical environment
  Note: ( Select "Y" or hit enter when prompted )
  - Xorg Server and graphical environment
    pacman -Sy xorg xfce4
  - Login Manager:
    pacman -Sy lightdm lightdm-gtk-greeter
    systemctl enable lightdm.service
  - reboot 

-> Install NetworkManager & Taskbar Applet
  Note: 
    case sensitive package names!
  pacman -Sy networkmanager network-manager-applet 
  systemctl enable NetworkManager.service
  reboot 
  Note: Check IP Address of the host with "ip a" and reconnect ethernet cable if it's incorrect
  ! WARNING !
  Installing networkmanager will ruine "eth0" config setup 
  but you can restore it by simply removing the two packages with: 
    pacman -R networkmanager network-manager-applet 

-> Setup SSH Connection
  - On the host execute "ssh-keygen" as "cubetest" user and press Enter repeatedly
  - On the client execute this:
    ssh-copy-id -i .ssh/id_rsa.pub cubetest@10.19.18.135
    Note: On Windows use git bash or cygwin
  Note: 
    If this process does not work you can try executing:
      "ssh -o StrictHostKeyChecking=no ... " instead of "ssh ..."
    or you can manually add your *.pub key to the authorized_keys file on the host

-> Setup VNC
  - Install basic development tools
    pacman -Sy git xterm base-devel 
  - As "cubetest" user clone the repository
    git clone -c http.sslVerify=false http://github.com/azalinux/realvnc-server-aarch64-manjaro
  - As "cubetest" user open cloned folder and execute:
    makepkg -si
    Note: This will create a *.pkg.tar.zst file 
  - As "cubetest" user CD into the folder and execute:
    sudo pacman -U realvnc...XY....pkg.tar.zst
  - Enable VNC server 
     sudo systemctl enable vncserver-x11-serviced
     reboot
  - Download and Install RealVNC client for Windows/Linux/MacOS from realvnc.com and test it 	
  Alternatively: 
  - Configure VNC server to work without monitor:
    - Open the following config file for editing:
      nano /boot/config.txt
    - Add the following lines:
      framebuffer_width=1920
      framebuffer_height=1080
      hdmi_force_hotplug=1
      hdmi_group=2
      hdmi_mode=82		
    - Connect to the VNC session then
      - Click drop-down menu in the top-left corner
      - Select "Settings -> Display"
      - Change resolution to 1920x1080

-> Python Setup
  - Update / Install python & pip :
    pacman -Sy python python-pip			   		
  - Test (upgrade) pip
    python -m pip install --upgrade pip			
	From a closed network:
    python -m pip install --upgrade --trusted-host files.pythonhosted.org --trusted-host pypi.org --trusted-host pypi.python.org pip	
  - Install OpenCV and Numpy for Image Recognition 
    pip install numpy opencv-python imutils

-> Camera Setup 
  - Connect the Camera's USB cable to the raspberry 
  - As "root" type "dmesg | tail" right after you plugged in the USB cable 
  - Last message should be similar to "new high-speed USB device number 6 using xhci_hcd"
    ...
  - Install packages for the camera:
    pacman -Sy v4l-utils 	
  - Type "v4l2-ctl --list-devices" and confirm you see a similar section:
    Logitech Webcam C930e ( usb-0000:01:00.0-1.3 ):
      /dev/video0
      /dev/video1
      /dev/media2
    Note:
    Instead of "Logitech Webcam C930e" there can be "Video Capture 4"
  - Type "v4l2-ctl
  - Test your camera 
    - Install guvcview:
      pacman -Sy guvcview 
    - Reboot  <- This is important!
    - Open "guvcview" as try camera settings ( Contrast / Zoom ...etc. )

-> Appium on Raspberry Setup 
  - Install Docker:
    Note: 
      This setup was followed:
      https://linuxconfig.org/manjaro-linux-docker-installation
    - Get Docker & Enable Service: 
      pacman -S docker
      systemctl start docker.service
      systemctl enable docker.service
    - Make docker available for non-root users: 
      usermod -aG docker cubetest 
    - reboot 
    - Check if docker service is up & running:
      systemctl status docker.service 
  - Install Appium Docker Container 
    Note: 
      These setups were followed:
      https://hub.docker.com/r/quamotion/appium-docker-ios
    - Install prerequisities
      pacman -Sy usbmuxd libimobiledevice
    - Connect your iPhone to your rPi
    - Unlock your phone & select "Trust" device
    - Execute:
      idevice_id -l

-> GPIO pin setup
  - Install this package:
    https://github.com/RPi-Distro/raspi-gpio

-> Use a USB stick with raspberry 	
  - Install automatic USB storage mounter utility
    pacman -Sy udisks2
  - Check partition table 
      lsblk
    Is should look similar:
      NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
      sda           8:0    1  14.5G  0 disk 
      └─sda1        8:1    1   1.9G  0 part 
      mmcblk0     179:0    0 119.1G  0 disk 
      ├─mmcblk0p1 179:1    0 213.6M  0 part /boot
      └─mmcblk0p2 179:2    0 118.8G  0 part /
      zram0       254:0    0   5.6G  0 disk [SWAP]
  - Mount your drive ( sda1 in this case ):
      udisksctl mount -b /dev/sda1 	
  - A similar message should appear:
      "Mounted /dev/sda1 at /run/media/cubetest/DAB9-390C"
